#if (${PACKAGE_NAME} != "")package ${PACKAGE_NAME};#end

import de.codecentric.reedelk.runtime.api.annotation.*;
import de.codecentric.reedelk.runtime.api.component.OnResult;
import de.codecentric.reedelk.runtime.api.component.ProcessorAsync;
import de.codecentric.reedelk.runtime.api.flow.FlowContext;
import de.codecentric.reedelk.runtime.api.message.Message;
import de.codecentric.reedelk.runtime.api.message.MessageAttributes;
import de.codecentric.reedelk.runtime.api.message.MessageBuilder;
import de.codecentric.reedelk.runtime.api.message.content.MimeType;
import org.osgi.service.component.annotations.Component;

import static de.codecentric.reedelk.runtime.api.commons.ComponentPrecondition.Configuration;
import static org.osgi.service.component.annotations.ServiceScope.PROTOTYPE;

@ModuleComponent("${NAME}")
@ComponentOutput(attributes = MessageAttributes.class, payload = Object.class, description = "${NAME} Output description")
@ComponentInput(payload = Object.class, description = "${NAME} Input description")
@Description("${NAME} description")
@Component(service = ${NAME}.class, scope = PROTOTYPE)
public class ${NAME} implements ProcessorAsync {

    @Property("My property")
    @Hint("My property value hint")
    @DefaultValue("My property value")
    @InitValue("World!")
    @Description("My property value description")
    private String myProperty;

    @Override
    public void initialize() {
        Configuration.requireNotBlank(${NAME}.class, myProperty, "My property must not be empty");
    }

    @Override
    public void apply(FlowContext flowContext, Message input, OnResult callback) {

        try {
            String processed = "Hello " + myProperty;
            Message output = MessageBuilder.get(${NAME}.class)
                    .withString(processed, MimeType.TEXT_PLAIN)
                    .build();

            // On success callback
            callback.onResult(flowContext, output);

        } catch (Exception exception) {
            // On error callback
            callback.onError(flowContext, exception);
        }
    }

    @Override
    public void dispose() {
        // dispose logic
    }

    public void setMyProperty(String myProperty) {
        this.myProperty = myProperty;
    }
}
