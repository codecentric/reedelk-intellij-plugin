package com.reedelk.plugin.editor.properties.widget.input.script.suggestion;

import java.util.Arrays;
import java.util.List;

import static com.reedelk.plugin.editor.properties.widget.input.script.suggestion.SuggestionType.LANGUAGE;

class PredefinedScriptSuggestions {

    static final List<SuggestionToken> KEYWORDS = Arrays.asList(
            new SuggestionToken("boolean", LANGUAGE),
            new SuggestionToken("break", LANGUAGE),
            new SuggestionToken("byte", LANGUAGE),
            new SuggestionToken("case", LANGUAGE),
            new SuggestionToken("catch", LANGUAGE),
            new SuggestionToken("char", LANGUAGE),
            new SuggestionToken("class", LANGUAGE),
            new SuggestionToken("const", LANGUAGE),
            new SuggestionToken("continue", LANGUAGE),
            new SuggestionToken("debugger", LANGUAGE),
            new SuggestionToken("default", LANGUAGE),
            new SuggestionToken("delete", LANGUAGE),
            new SuggestionToken("do", LANGUAGE),
            new SuggestionToken("double", LANGUAGE),
            new SuggestionToken("else", LANGUAGE),
            new SuggestionToken("enum", LANGUAGE),
            new SuggestionToken("eval", LANGUAGE),
            new SuggestionToken("export", LANGUAGE),
            new SuggestionToken("extends", LANGUAGE),
            new SuggestionToken("false", LANGUAGE),
            new SuggestionToken("final", LANGUAGE),
            new SuggestionToken("finally", LANGUAGE),
            new SuggestionToken("float", LANGUAGE),
            new SuggestionToken("for", LANGUAGE),
            new SuggestionToken("function", LANGUAGE),
            new SuggestionToken("if", LANGUAGE),
            new SuggestionToken("implements", LANGUAGE),
            new SuggestionToken("import", LANGUAGE),
            new SuggestionToken("in", LANGUAGE),
            new SuggestionToken("instanceof", LANGUAGE),
            new SuggestionToken("int", LANGUAGE),
            new SuggestionToken("let", LANGUAGE),
            new SuggestionToken("long", LANGUAGE),
            new SuggestionToken("native", LANGUAGE),
            new SuggestionToken("new", LANGUAGE),
            new SuggestionToken("null", LANGUAGE),
            new SuggestionToken("package", LANGUAGE),
            new SuggestionToken("private", LANGUAGE),
            new SuggestionToken("protected", LANGUAGE),
            new SuggestionToken("public", LANGUAGE),
            new SuggestionToken("return", LANGUAGE),
            new SuggestionToken("short", LANGUAGE),
            new SuggestionToken("static", LANGUAGE),
            new SuggestionToken("super", LANGUAGE),
            new SuggestionToken("switch", LANGUAGE),
            new SuggestionToken("synchronized", LANGUAGE),
            new SuggestionToken("this", LANGUAGE),
            new SuggestionToken("throw", LANGUAGE),
            new SuggestionToken("throws", LANGUAGE),
            new SuggestionToken("true", LANGUAGE),
            new SuggestionToken("try", LANGUAGE),
            new SuggestionToken("typeof", LANGUAGE),
            new SuggestionToken("var", LANGUAGE),
            new SuggestionToken("void", LANGUAGE),
            new SuggestionToken("while", LANGUAGE),
            new SuggestionToken("with", LANGUAGE),
            new SuggestionToken("yield", LANGUAGE));
}
